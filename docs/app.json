[{"name": "app.py", "content": "from shiny import App, ui, render, reactive\nimport xml.etree.ElementTree as ET\nimport plotly.graph_objects as go\nimport plotly.io as pio\nimport plotly.utils\nimport datetime\nimport io\nimport pandas as pd\nimport numpy as np\nimport json\n\ndef convert_tcx(tcx_content):\n    root = ET.fromstring(tcx_content)\n    ns = {'ns': 'http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2'}\n    \n    points = []\n    heart_rates = []\n    timestamps = []\n    \n    for trackpoint in root.findall('.//ns:Trackpoint', ns):\n        position = trackpoint.find('ns:Position', ns)\n        if position is not None:\n            lat = float(position.find('ns:LatitudeDegrees', ns).text)\n            lon = float(position.find('ns:LongitudeDegrees', ns).text)\n            points.append((lat, lon))\n            \n            heart_rate = trackpoint.find('.//ns:HeartRateBpm/ns:Value', ns)\n            heart_rates.append(int(heart_rate.text) if heart_rate is not None else None)\n            \n            time = trackpoint.find('ns:Time', ns)\n            if time is not None:\n                timestamps.append(datetime.datetime.fromisoformat(time.text.replace('Z', '+00:00')))\n    \n    start_time = timestamps[0] if timestamps else None\n    duration = timestamps[-1] - timestamps[0] if len(timestamps) > 1 else datetime.timedelta(0)\n    \n    return points, heart_rates, start_time, duration, timestamps\n\n# Define colorblind-friendly colors\nCOLORBLIND_FRIENDLY_COLORS = ['#E69F00', '#56B4E9', '#009E73', '#F0E442', '#0072B2', '#D55E00', '#CC79A7', '#999999']\n\napp_ui = ui.page_fluid(\n    ui.panel_title(\"Pyodide TCX Demo\"),\n    ui.tags.head(\n        ui.tags.link(rel=\"stylesheet\", href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\"),\n        ui.tags.script(src=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\"),\n    ),\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_file(\"data_files\", \"Upload TCX file(s)\", accept=[\".tcx\"], multiple=True),\n            ui.output_ui(\"file_info\"),\n        ),\n        ui.column(12, \n            ui.div(\n                ui.output_ui(\"map_output\"),\n                ui.output_ui(\"heart_rate_plot\"),\n                style=\"display: flex; flex-direction: column; gap: 10px;\"\n            )\n        ),\n        ui.output_text(\"debug_info\"),\n    )\n)\n\ndef server(input, output, session):\n    data = reactive.Value({})\n    timeline_data = reactive.Value(pd.DataFrame())\n    plot_data_reactive = reactive.Value(None)\n\n    @reactive.Effect\n    @reactive.event(input.data_files)\n    def _():\n        files = input.data_files()\n        if files is None:\n            data.set({})\n            return\n\n        processed_data = {}\n        all_data = []\n        for i, file in enumerate(files):\n            file_content = file[\"datapath\"]\n            try:\n                with open(file_content, \"r\") as f:\n                    file_content = f.read()\n                points, heart_rates, start_time, duration, timestamps = convert_tcx(file_content)\n                \n                valid_heart_rates = [hr for hr in heart_rates if hr is not None]\n                max_hr = max(valid_heart_rates) if valid_heart_rates else None\n                color = COLORBLIND_FRIENDLY_COLORS[i % len(COLORBLIND_FRIENDLY_COLORS)]\n                processed_data[file[\"name\"]] = {\n                    \"points\": points,\n                    \"heart_rates\": heart_rates,\n                    \"start_time\": start_time,\n                    \"duration\": duration,\n                    \"max_hr\": max_hr,\n                    \"color\": color,\n                    \"timestamps\": timestamps\n                }\n                \n                # Prepare data for timeline\n                df = pd.DataFrame({\n                    \"timestamp\": timestamps,\n                    \"heart_rate\": heart_rates,\n                    \"lat\": [p[0] for p in points],\n                    \"lon\": [p[1] for p in points],\n                    \"file\": file[\"name\"],\n                    \"color\": color\n                })\n                all_data.append(df)\n            except Exception as e:\n                print(f\"Error processing data for {file['name']}: {str(e)}\")\n                processed_data[file[\"name\"]] = {\"error\": f\"Error processing data: {str(e)}\"}\n\n        data.set(processed_data)\n        \n        # Combine all data for timeline\n        if all_data:\n            combined_data = pd.concat(all_data, ignore_index=True)\n            # Ensure timestamp column is in datetime format\n            combined_data[\"timestamp\"] = pd.to_datetime(combined_data[\"timestamp\"], utc=True)\n            # Calculate elapsed time in seconds for each file separately\n            combined_data[\"elapsed_time\"] = combined_data.groupby(\"file\")[\"timestamp\"].transform(lambda x: (x - x.min()).dt.total_seconds())\n            timeline_data.set(combined_data)\n\n    @output\n    @render.ui\n    def file_info():\n        data_info = data.get()\n        if not data_info:\n            return \"Please upload TCX file(s).\"\n\n        info_html = \"<h3>Run Data:</h3>\"\n        for filename, file_data in data_info.items():\n            if \"error\" in file_data:\n                info_html += f\"<p><strong>{filename}:</strong> Error: {file_data['error']}</p>\"\n            else:\n                info_html += f\"<p><strong>{filename}:</strong><br>\"\n                info_html += f\"Date: {file_data['start_time'].strftime('%Y-%m-%d')}<br>\"\n                info_html += f\"Duration: {str(file_data['duration']).split('.')[0]}<br>\"\n                if file_data['max_hr'] is not None:\n                    info_html += f\"Max Heart Rate: {file_data['max_hr']} bpm</p>\"\n                else:\n                    info_html += \"Heart Rate Data: Not available</p>\"\n        return ui.HTML(info_html)\n\n    @output\n    @render.ui\n    def map_output():\n        data_info = data.get()\n        if not data_info:\n            return \"No map data available\"\n\n        all_points = []\n        for file_data in data_info.values():\n            if \"error\" not in file_data:\n                all_points.extend(file_data['points'])\n\n        if not all_points:\n            return \"No valid GPS points found\"\n\n        # Calculate the center and zoom level\n        lats, lons = zip(*all_points)\n        center_lat = (min(lats) + max(lats)) / 2\n        center_lon = (min(lons) + max(lons)) / 2\n\n        map_data = {\n            \"center\": [center_lat, center_lon],\n            \"zoom\": 12,\n            \"tracks\": [\n                {\n                    \"name\": filename,\n                    \"color\": file_data['color'],\n                    \"points\": file_data['points']\n                }\n                for filename, file_data in data_info.items()\n                if \"error\" not in file_data\n            ]\n        }\n\n        return ui.HTML(f\"\"\"\n        <div id=\"map\" style=\"height: 400px; width: 100%;\"></div>\n        <script>\n        var mapData = {json.dumps(map_data)};\n        var map, currentPositionMarkers = {{}};\n        \n        function initializeMap() {{\n            if (map) {{\n                map.remove();\n            }}\n            map = L.map('map').setView(mapData.center, mapData.zoom);\n            L.tileLayer('https://cartodb-basemaps-{{s}}.global.ssl.fastly.net/light_all/{{z}}/{{x}}/{{y}}.png', {{\n                attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>'\n            }}).addTo(map);\n\n            mapData.tracks.forEach(function(track) {{\n                L.polyline(track.points, {{color: track.color, weight: 3, opacity: 0.8}}).addTo(map);\n                L.circleMarker(track.points[0], {{\n                    color: 'black',\n                    fillColor: track.color,\n                    fillOpacity: 1,\n                    radius: 6\n                }}).addTo(map).bindPopup('Start - ' + track.name);\n                L.circleMarker(track.points[track.points.length - 1], {{\n                    color: 'black',\n                    fillColor: track.color,\n                    fillOpacity: 1,\n                    radius: 6\n                }}).addTo(map).bindPopup('End - ' + track.name);\n            }});\n        }}\n\n        // Initialize map after a short delay to ensure the container is ready\n        setTimeout(initializeMap, 100);\n\n        function updateMarkerPosition(lat, lon, color, filename) {{\n            if (!map) return;\n            \n            if (!currentPositionMarkers[filename]) {{\n                currentPositionMarkers[filename] = L.circleMarker([lat, lon], {{\n                    color: color,\n                    fillColor: color,\n                    fillOpacity: 0.8,\n                    radius: 8\n                }}).addTo(map);\n            }} else {{\n                currentPositionMarkers[filename].setLatLng([lat, lon]);\n            }}\n            map.panTo([lat, lon]);\n        }}\n        </script>\n        \"\"\")\n\n    @output\n    @render.ui\n    def heart_rate_plot():\n        return ui.HTML(\"\"\"\n        <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>\n        <div id=\"plotly-heart-rate\" style=\"width:100%;height:300px;\"></div>\n        \"\"\")\n\n    @reactive.Effect\n    @reactive.event(timeline_data)\n    def _():\n        data_info = timeline_data.get()\n        if data_info.empty:\n            plot_data_reactive.set(None)\n            return\n\n        fig = go.Figure()\n\n        for file_name in data_info['file'].unique():\n            file_data = data_info[data_info['file'] == file_name]\n            \n            # Filter out None values from heart rate data\n            valid_data = file_data.dropna(subset=['heart_rate'])\n            \n            if not valid_data.empty:\n                fig.add_trace(go.Scatter(\n                    x=valid_data['elapsed_time'] / 60,  # Convert to minutes\n                    y=valid_data['heart_rate'],\n                    mode='lines',\n                    name=file_name,\n                    line=dict(color=valid_data['color'].iloc[0])\n                ))\n\n        fig.update_layout(\n            title=\"Heart Rate Over Time\",\n            xaxis_title=\"Time Elapsed (minutes)\",\n            yaxis_title=\"Heart Rate (bpm)\",\n            hovermode=\"x unified\",\n            height=300,\n            legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1)\n        )\n\n        plot_data_json = json.dumps(fig.data, cls=plotly.utils.PlotlyJSONEncoder)\n        layout_data_json = json.dumps(fig.layout, cls=plotly.utils.PlotlyJSONEncoder)\n        \n        plot_data_reactive.set((plot_data_json, layout_data_json))\n\n    @reactive.Effect\n    @reactive.event(plot_data_reactive)\n    def update_plot():\n        plot_data = plot_data_reactive.get()\n        if plot_data is not None:\n            plot_data_json, layout_data_json = plot_data\n            ui.insert_ui(\n                ui.tags.script(f\"\"\"\n                Plotly.newPlot('plotly-heart-rate', {plot_data_json}, {layout_data_json});\n                var plotlyDiv = document.getElementById('plotly-heart-rate');\n                plotlyDiv.on('plotly_hover', function(data){{\n                    var x = data.points[0].x;\n                    Shiny.setInputValue('hover_time', x);\n                }});\n                \"\"\"),\n                selector=\"#plotly-heart-rate\",\n                where=\"afterEnd\"\n            )\n\n    @reactive.Effect\n    @reactive.event(input.hover_time)\n    def _():\n        hover_time = input.hover_time()\n        data_info = timeline_data.get()\n        if not data_info.empty and hover_time is not None:\n            # Convert hover_time back to seconds\n            hover_time_seconds = hover_time * 60\n            current_data = data_info[data_info['elapsed_time'] <= hover_time_seconds].groupby('file').last()\n            \n            if not current_data.empty:\n                # Update the map marker position using JavaScript for each file\n                for _, row in current_data.iterrows():\n                    ui.insert_ui(\n                        ui.tags.script(f\"updateMarkerPosition({row['lat']}, {row['lon']}, '{row['color']}', '{row.name}');\"),\n                        selector=\"#map\",\n                        where=\"afterEnd\"\n                    )\n\n    @output\n    @render.text\n    def debug_info():\n        data_info = timeline_data.get()\n        if data_info.empty:\n            return \"No data available for debugging\"\n        \n        debug_str = f\"Total rows: {len(data_info)}\\n\"\n        debug_str += f\"Columns: {', '.join(data_info.columns)}\\n\"\n        debug_str += f\"Heart rate range: {data_info['heart_rate'].min()} - {data_info['heart_rate'].max()}\\n\"\n        debug_str += f\"Time range: {data_info['elapsed_time'].min() / 60:.2f} - {data_info['elapsed_time'].max() / 60:.2f} minutes\"\n        return debug_str\n        \napp = App(app_ui, server)", "type": "text"}, {"name": "README.md", "content": "# TCX Data Viewer\n\n## Overview\nThe TCX Data Viewer is a Shiny for Python application that allows users to upload and visualize Training Center XML (TCX) files. This app provides an interactive interface to analyze GPS tracks and heart rate data from workouts or activities recorded in TCX format.\n\n## Features\n- Upload multiple TCX files simultaneously\n- Display a map showing the GPS tracks of all uploaded files\n- Plot heart rate data over time for all uploaded files\n- Show summary information for each uploaded file, including:\n  - Start date and time\n  - Duration of the activity\n  - Maximum heart rate\n\n## How to Use\n1. Launch the application.\n2. Use the file upload button to select one or more TCX files from your computer.\n3. Once files are uploaded, the app will process them and display:\n   - A map showing the GPS tracks of all activities\n   - A plot of heart rate data over time for all activities\n   - Summary information for each uploaded file\n\n## Map Features\n- The map displays the route for each uploaded file in a different color.\n- Start points are marked with green markers.\n- End points are marked with red markers.\n- You can zoom and pan the map to explore the routes in detail.\n\n## Heart Rate Plot Features\n- The heart rate data for each file is plotted in a different color.\n- The x-axis shows the duration of the activity.\n- The y-axis shows the heart rate in beats per minute (BPM).\n- A legend identifies which color corresponds to which file.\n\n## Requirements\nThis app requires the following Python packages:\n- shiny\n- gpxpy\n- matplotlib\n- folium\n- branca\n\n## Running the App\nTo run this app locally:\n1. Ensure you have all the required packages installed.\n2. Run the app.py file using a Python interpreter.\n\n## Note\nThis app is designed to work with TCX files. Ensure your files are in the correct format for the best experience.\n\n", "type": "text"}, {"name": "requirements.txt", "content": "shiny\nplotly\nfolium\npandas\nnumpy", "type": "text"}]